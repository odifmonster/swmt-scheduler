#!/usr/bin/env python

from typing import TypeVar, TypeVarTuple, Generic, Protocol, Generator, Hashable

from app.support import SuperImmut
from app.groups import DataView

_T = TypeVar('_T', bound=Hashable)
_U = TypeVar('_U', bound=Hashable)
_Us = TypeVarTuple('_Us')

class _GLike(Protocol[_T, _U]):
    @property
    def depth(self) -> int: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Generator[_U]: ...
    def __contains__(self, key: _U) -> bool: ...
    def __getitem__(self, key: _U | tuple) -> '_GLike[_T] | DataView[_T]': ...

class GKeys(Generic[_T, _U, *_Us], SuperImmut):
    """
    A class for live, immutable views of the full keys of a Grouped object.
    """
    def __init__(self, link: _GLike[_T, _U]): ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Generator[tuple[_U, *_Us]]: ...
    def __contains__(self, key: tuple[_U, *_Us]) -> bool: ...