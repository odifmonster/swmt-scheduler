#!/usr/bin/env python

from typing import TypeVar, TypeVarTuple, Generic, Protocol, Generator, Hashable

from app.support import SuperView
from app.groups import DataView

T = TypeVar('T', bound=Hashable)
U = TypeVar('U', bound=Hashable)
Us = TypeVarTuple('Us')

class _GLike(Protocol[T, U]):
    @property
    def depth(self) -> int: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Generator[U]: ...
    def __contains__(self, key: U) -> bool: ...
    def __getitem__(self, key: U | tuple) -> '_GLike[T] | DataView[T]': ...

class GKeys(Generic[T, U, *Us], SuperView[_GLike[T, U]]):
    def __init_subclass__(cls) -> None: ...
    def __iter__(self) -> Generator[tuple[U, *Us]]: ...
    def __contains__(self, key: tuple[U, *Us]) -> bool: ...