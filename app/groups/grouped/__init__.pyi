from typing import TypeVar, Generic, Unpack, Hashable
from app.groups import Data, DataView

_T = TypeVar('_T', bound=Hashable)
_U = TypeVar('U', bound=Hashable)

class _Atom(Generic[_T]):
    def __repr__(self) -> str: ...
    def add(self, data: Data[_T]) -> None: ...
    def remove(self, dview: DataView[_T]) -> Data[_T]: ...

class Grouped(Generic[_T, _U]):
    def __init__(self, *args: Unpack[tuple[str, ...]], **kwargs) -> None: ...
    @property
    def depth(self) -> int: ...
    def __repr__(self) -> str: ...
    def make_atom(self, data: Data[_T], *args: Unpack[tuple[str, ...]]) -> _Atom[_T]: ...
    def make_group(self, data: Data[_T], prev_props: dict[str]) -> 'Grouped[_T] | _Atom[_T]': ...
    def add(self, data: Data[_T]) -> None: ...
    def remove(self, dview: DataView[_T]) -> Data[_T]: ...