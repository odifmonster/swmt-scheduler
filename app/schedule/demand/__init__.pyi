from app.schedule.demand.order import Order as Order, OrderView as OrderView
from app.schedule.demand.req import Req as Req

from typing import TypedDict, Unpack, Generator, overload
import datetime as dt
from app.support.grouped import Grouped, GroupedView, Atom
from app.style import GreigeStyle, Color

class _DateProps(TypedDict):
    due_date: dt.datetime

class _GreigeProps(_DateProps):
    greige: GreigeStyle

class _ColorProps(_GreigeProps):
    color: Color

class _OrderAtom(Atom[str]):
    def __init__(self, data: Order, *args: Unpack[tuple[str, ...]]) -> None: ...
    def __getitem__(self, key: tuple[()]) -> OrderView: ...
    def itervalues(self) -> Generator[OrderView]: ...
    def get(self, id: str) -> OrderView: ...
    def add(self, data: Order) -> None: ...
    def remove(self, dview: OrderView, remkey: bool = False) -> Order: ...

class ColorGroup(Grouped[str, str]):
    def __init__(self, **kwargs: Unpack[_ColorProps]) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> ColorView: ...
    @overload
    def __getitem__(self, key: str | tuple[str]) -> OrderView: ...
    def make_group(self, data: Order, **kwargs: Unpack[_ColorProps]) -> _OrderAtom: ...
    def itervalues(self) -> Generator[OrderView]: ...
    def get(self, id: str) -> OrderView: ...
    def add(self, data: Order) -> None: ...
    def remove(self, dview: OrderView, remkey: bool = False) -> Order: ...
    def view(self) -> ColorView: ...

class ColorView(GroupedView[str, str]):
    def __init__(self, link: ColorGroup) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> ColorView: ...
    @overload
    def __getitem__(self, key: str | tuple[str]) -> OrderView: ...
    def make_group(self, data: Order, **kwargs: Unpack[_ColorProps]) -> _OrderAtom: ...
    def itervalues(self) -> Generator[OrderView]: ...
    def get(self, id: str) -> OrderView: ...
    def add(self, data: Order) -> None: ...
    def remove(self, dview: OrderView, remkey: bool = False) -> Order: ...

class GreigeGroup(Grouped[str, Color]):
    def __init__(self, **kwargs: Unpack[_GreigeProps]) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> GreigeView: ...
    @overload
    def __getitem__(self, key: Color | tuple[Color]) -> ColorView: ...
    @overload
    def __getitem__(self, key: tuple[Color, str]) -> OrderView: ...
    def make_group(self, data: Order, **kwargs: Unpack[_GreigeProps]) -> ColorGroup: ...
    def iterkeys(self) -> Generator[tuple[Color, str]]: ...
    def itervalues(self) -> Generator[OrderView]: ...
    def get(self, id: str) -> OrderView: ...
    def add(self, data: Order) -> None: ...
    def remove(self, dview: OrderView, remkey: bool = False) -> Order: ...
    def view(self) -> GreigeView: ...

class GreigeView(GroupedView[str, Color]):
    def __init__(self, link: GreigeGroup) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> GreigeView: ...
    @overload
    def __getitem__(self, key: Color | tuple[Color]) -> ColorView: ...
    @overload
    def __getitem__(self, key: tuple[Color, str]) -> OrderView: ...
    def make_group(self, data: Order, **kwargs: Unpack[_GreigeProps]) -> ColorGroup: ...
    def iterkeys(self) -> Generator[tuple[Color, str]]: ...
    def itervalues(self) -> Generator[OrderView]: ...
    def get(self, id: str) -> OrderView: ...
    def add(self, data: Order) -> None: ...
    def remove(self, dview: OrderView, remkey: bool = False) -> Order: ...

class DateGroup(Grouped[str, GreigeStyle]):
    def __init__(self, **kwargs: Unpack[_DateProps]) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> DateView: ...
    @overload
    def __getitem__(self, key: GreigeStyle | tuple[GreigeStyle]) -> GreigeView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color]) -> ColorView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color, str]) -> OrderView: ...
    def make_group(self, data: Order, **kwargs: Unpack[_DateProps]) -> GreigeGroup: ...
    def iterkeys(self) -> Generator[tuple[GreigeStyle, Color, str]]: ...
    def itervalues(self) -> Generator[OrderView]: ...
    def get(self, id: str) -> OrderView: ...
    def add(self, data: Order) -> None: ...
    def remove(self, dview: OrderView, remkey: bool = False) -> Order: ...
    def view(self) -> DateView: ...

class DateView(GroupedView[str, GreigeStyle]):
    def __init__(self, link: DateGroup) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> DateView: ...
    @overload
    def __getitem__(self, key: GreigeStyle | tuple[GreigeStyle]) -> GreigeView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color]) -> ColorView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color, str]) -> OrderView: ...
    def make_group(self, data: Order, **kwargs: Unpack[_DateProps]) -> GreigeGroup: ...
    def iterkeys(self) -> Generator[tuple[GreigeStyle, Color, str]]: ...
    def itervalues(self) -> Generator[OrderView]: ...
    def get(self, id: str) -> OrderView: ...
    def add(self, data: Order) -> None: ...
    def remove(self, dview: OrderView, remkey: bool = False) -> Order: ...

class Demand(Grouped[str, dt.datetime]):
    """
    A class for Demand objects. Organizes Order objects by
    their due date, greige style, and color.
    """
    def __init__(self) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> DemandView: ...
    @overload
    def __getitem__(self, key: dt.datetime | tuple[dt.datetime]) -> DateView: ...
    @overload
    def __getitem__(self, key: tuple[dt.datetime, GreigeStyle]) -> GreigeView: ...
    @overload
    def __getitem__(self, key: tuple[dt.datetime, GreigeStyle, Color]) -> ColorView: ...
    @overload
    def __getitem__(self, key: tuple[dt.datetime, GreigeStyle, Color, str]) -> OrderView: ...
    def make_group(self, data: Order, **kwargs) -> DateGroup: ...
    def iterkeys(self) -> Generator[tuple[dt.datetime, GreigeStyle, Color, str]]: ...
    def itervalues(self) -> Generator[OrderView]: ...
    def get(self, id: str) -> OrderView: ...
    def add(self, data: Order) -> None: ...
    def remove(self, dview: OrderView, remkey: bool = False) -> Order: ...
    def get_matches(self, order: Order) -> list[OrderView]:
        """Get a list of views of the orders that match this one on color and greige style."""
        ...
    def view(self) -> DemandView: ...

class DemandView(GroupedView[str, dt.datetime]):
    """
    A class for views of Demand objects.
    """
    def __init__(self, link: Demand) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> DemandView: ...
    @overload
    def __getitem__(self, key: dt.datetime | tuple[dt.datetime]) -> DateView: ...
    @overload
    def __getitem__(self, key: tuple[dt.datetime, GreigeStyle]) -> GreigeView: ...
    @overload
    def __getitem__(self, key: tuple[dt.datetime, GreigeStyle, Color]) -> ColorView: ...
    @overload
    def __getitem__(self, key: tuple[dt.datetime, GreigeStyle, Color, str]) -> OrderView: ...
    def make_group(self, data: Order, **kwargs) -> DateGroup: ...
    def iterkeys(self) -> Generator[tuple[dt.datetime, GreigeStyle, Color, str]]: ...
    def itervalues(self) -> Generator[OrderView]: ...
    def get(self, id: str) -> OrderView: ...
    def add(self, data: Order) -> None: ...
    def remove(self, dview: OrderView, remkey: bool = False) -> Order: ...
    def get_matches(self, order: Order) -> list[OrderView]:
        """Get a list of views of the orders that match this one on color and greige style."""
        ...