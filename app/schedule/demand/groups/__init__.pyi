from app.schedule.demand.groups.groups import ColorProps as ColorProps, \
    GreigeProps as GreigeProps, PriorityProps as PriorityProps

from typing import Unpack, overload
import datetime
from app.support import PrettyArgsOpt
from app.support.groups import GroupedView, Grouped
from app.style import GreigeStyle
from app.schedule.demand.demand import DemandView, Demand

class ColorGroupView(GroupedView[int, PrettyArgsOpt, int],
                     no_access=['add','remove'],
                     overrides=[],
                     dunders=['eq','hash']):
    """
    A class for views of ColorGroup objects.
    """
    @overload
    def __getitem__(self, key: tuple[()]) -> 'ColorGroupView': ...
    @overload
    def __getitem__(self, key: int | tuple[int]) -> DemandView: ...

class ColorGroup(Grouped[int, PrettyArgsOpt, int]):
    """
    A Grouped subtype whose data is Demand objects. The contents must match on
    due date, greige style, and dye formula.
    """
    def __init__(self, **props: Unpack[ColorProps]) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> 'ColorGroupView': ...
    @overload
    def __getitem__(self, key: int | tuple[int]) -> DemandView: ...
    def add(self, data: Demand) -> None: ...
    def remove(self, id: int) -> Demand: ...
    def view(self) -> ColorGroupView: ...

class GreigeGroupView(GroupedView[int, PrettyArgsOpt, str, int],
                      no_access=['add','remove'],
                      overrides=[],
                      dunders=['eq','hash']):
    """
    A class for views of GreigeGroup objects.
    """
    @overload
    def __getitem__(self, key: tuple[()]) -> 'GreigeGroupView': ...
    @overload
    def __getitem__(self, key: str | tuple[str]) -> ColorGroupView: ...
    @overload
    def __getitem__(self, key: tuple[str, int]) -> DemandView: ...


class GreigeGroup(Grouped[int, PrettyArgsOpt, str, int]):
    """
    A Grouped subtype whose data is Demand objects. The contents must match on
    due date and greige style.
    """
    def __init__(self, **props: Unpack[GreigeProps]) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> 'GreigeGroupView': ...
    @overload
    def __getitem__(self, key: str | tuple[str]) -> ColorGroupView: ...
    @overload
    def __getitem__(self, key: tuple[str, int]) -> DemandView: ...
    def add(self, data: Demand) -> None: ...
    def remove(self, id: int) -> Demand: ...
    def view(self) -> DemandView: ...

class PriorityGroupView(GroupedView[int, PrettyArgsOpt, GreigeStyle, str, int],
                        no_access=['add','remove'],
                        overrides=[],
                        dunders=['eq','hash']):
    """
    A class for views of PriorityGroup objects.
    """
    @overload
    def __getitem__(self, key: tuple[()]) -> 'PriorityGroupView': ...
    @overload
    def __getitem__(self, key: GreigeStyle | tuple[GreigeStyle]) -> GreigeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, str]) -> ColorGroupView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, str, int]) -> DemandView: ...

class PriorityGroup(Grouped[int, PrettyArgsOpt, GreigeStyle, str, int]):
    """
    A Grouped subtype whose data is Demand objects. The contents must match on
    due date.
    """
    def __init__(self, **props: Unpack[PriorityProps]) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> 'PriorityGroupView': ...
    @overload
    def __getitem__(self, key: GreigeStyle | tuple[GreigeStyle]) -> GreigeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, str]) -> ColorGroupView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, str, int]) -> DemandView: ...
    def add(self, data: Demand) -> None: ...
    def remove(self, id: int) -> Demand: ...
    def view(self) -> PriorityGroupView: ...

class DemandGroupView(GroupedView[int, PrettyArgsOpt, datetime.datetime, GreigeStyle, str, int],
                      no_access=['add','remove'],
                      overrides=[],
                      dunders=['eq','hash']):
    @overload
    def __getitem__(self, key: tuple[()]) -> 'DemandGroupView': ...
    @overload
    def __getitem__(self, key: datetime.datetime | tuple[datetime.datetime]) -> PriorityGroupView: ...
    @overload
    def __getitem__(self, key: tuple[datetime.datetime, GreigeStyle]) -> GreigeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[datetime.datetime, GreigeStyle, str]) -> ColorGroupView: ...
    @overload
    def __getitem__(self, key: tuple[datetime.datetime, GreigeStyle, str, int]) -> DemandView: ...

class DemandGroup(Grouped[int, PrettyArgsOpt, datetime.datetime, GreigeStyle, str, int]):
    def __init__(self) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> 'DemandGroupView': ...
    @overload
    def __getitem__(self, key: datetime.datetime | tuple[datetime.datetime]) -> PriorityGroupView: ...
    @overload
    def __getitem__(self, key: tuple[datetime.datetime, GreigeStyle]) -> GreigeGroupView: ...
    @overload
    def __getitem__(self, key: tuple[datetime.datetime, GreigeStyle, str]) -> ColorGroupView: ...
    @overload
    def __getitem__(self, key: tuple[datetime.datetime, GreigeStyle, str, int]) -> DemandView: ...
    def add(self, data: Demand) -> None: ...
    def remove(self, id: int) -> Demand: ...
    def view(self) -> DemandGroupView: ...