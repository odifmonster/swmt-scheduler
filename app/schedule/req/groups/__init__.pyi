from app.schedule.req.groups.group_types import GreigeProps as GreigeProps, \
    ColorProps as ColorProps, ItemProps as ItemProps, PriorProps as PriorProps

from typing import Unpack, overload
import datetime as dt
from app.groups import GKeys, GroupedView, Grouped
from app.style import FabricStyle, GreigeStyle, Color
from app.schedule.req import ReqView, Req

type ReqPriorKeys = GKeys[str, str]
type ReqItemKeys = GKeys[str, dt.datetime, str]
type ReqColorKeys = GKeys[str, FabricStyle, dt.datetime, str]
type ReqGreigeKeys = GKeys[str, Color, FabricStyle, dt.datetime, str]
type DemandKeys = GKeys[str, GreigeStyle, Color, FabricStyle, dt.datetime, str]

class ReqPriorView(GroupedView[str, str]):
    """
    A class for views of ReqPriorGroup objects.
    """
    def __init__(self, link: 'ReqPriorGroup') -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> 'ReqPriorView': ...
    @overload
    def __getitem__(self, key: str | tuple[str]) -> ReqView: ...
    def add(self, data: Req) -> None: ...
    def remove(self, dview: ReqView) -> Req: ...
    def fullkeys(self) -> ReqPriorKeys: ...

class ReqPriorGroup(Grouped[str, str]):
    """
    A subtype of Grouped for grouping Req objects. They are effectively containers for individual
    requirements.
    """
    def __init__(self, **kwargs: Unpack[PriorProps]) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> ReqPriorView: ...
    @overload
    def __getitem__(self, key: str | tuple[str]) -> ReqView: ...
    def add(self, data: Req) -> None: ...
    def remove(self, dview: ReqView) -> None: ...
    def fullkeys(self) -> ReqPriorKeys: ...
    def view(self) -> ReqPriorView: ...

class ReqItemView(GroupedView[str, dt.datetime]):
    """
    A class for views of ReqItemGroup objects.
    """
    def __init__(self, link: 'ReqItemGroup') -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> 'ReqItemView': ...
    @overload
    def __getitem__(self, key: dt.datetime | tuple[dt.datetime]) -> ReqPriorView: ...
    @overload
    def __getitem__(self, key: tuple[dt.datetime, str]) -> ReqView: ...
    def add(self, data: Req) -> None: ...
    def remove(self, dview: ReqView) -> Req: ...
    def fullkeys(self) -> ReqItemKeys: ...

class ReqItemGroup(Grouped[str, dt.datetime]):
    """
    A subtype of Grouped for grouping Req objects. They must share the same greige style, color,
    and fabric item.
    """
    def __init__(self, **kwargs: Unpack[ItemProps]) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> ReqItemView: ...
    @overload
    def __getitem__(self, key: dt.datetime | tuple[dt.datetime]) -> ReqPriorView: ...
    @overload
    def __getitem__(self, key: tuple[dt.datetime, str]) -> ReqView: ...
    def add(self, data: Req) -> None: ...
    def remove(self, dview: ReqView) -> None: ...
    def fullkeys(self) -> ReqItemKeys: ...
    def view(self) -> ReqItemView: ...

class ReqColorView(GroupedView[str, FabricStyle]):
    """
    A class for views of ReqColorGroup objects.
    """
    def __init__(self, link: 'ReqColorGroup') -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> 'ReqColorView': ...
    @overload
    def __getitem__(self, key: FabricStyle | tuple[FabricStyle]) -> ReqItemView: ...
    @overload
    def __getitem__(self, key: tuple[FabricStyle, dt.datetime]) -> ReqPriorView: ...
    @overload
    def __getitem__(self, key: tuple[FabricStyle, dt.datetime, str]) -> ReqView: ...
    def add(self, data: Req) -> None: ...
    def remove(self, dview: ReqView) -> Req: ...
    def fullkeys(self) -> ReqColorKeys: ...

class ReqColorGroup(Grouped[str, FabricStyle]):
    """
    A subtype of Grouped for grouping Req objects. They must share the same greige style and
    color.
    """
    def __init__(self, **kwargs: Unpack[ColorProps]) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> ReqColorView: ...
    @overload
    def __getitem__(self, key: FabricStyle | tuple[FabricStyle]) -> ReqItemView: ...
    @overload
    def __getitem__(self, key: tuple[FabricStyle, dt.datetime]) -> ReqPriorView: ...
    @overload
    def __getitem__(self, key: tuple[FabricStyle, dt.datetime, str]) -> ReqView: ...
    def add(self, data: Req) -> None: ...
    def remove(self, dview: ReqView) -> None: ...
    def fullkeys(self) -> ReqColorKeys: ...
    def view(self) -> ReqColorView: ...

class ReqGreigeView(GroupedView[str, Color]):
    """
    A class for views of ReqGreigeGroup objects.
    """
    def __init__(self, link: 'ReqGreigeGroup') -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> 'ReqGreigeView': ...
    @overload
    def __getitem__(self, key: Color | tuple[Color]) -> ReqColorView: ...
    @overload
    def __getitem__(self, key: tuple[Color, FabricStyle]) -> ReqItemView: ...
    @overload
    def __getitem__(self, key: tuple[Color, FabricStyle, dt.datetime]) -> ReqPriorView: ...
    @overload
    def __getitem__(self, key: tuple[Color, FabricStyle, dt.datetime, str]) -> ReqView: ...
    def add(self, data: Req) -> None: ...
    def remove(self, dview: ReqView) -> Req: ...
    def fullkeys(self) -> ReqGreigeKeys: ...

class ReqGreigeGroup(Grouped[str, Color]):
    """
    A subtype of Grouped for grouping Roll objects. They must share the same greige style.
    """
    def __init__(self, **kwargs: Unpack[GreigeProps]) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> ReqGreigeView: ...
    @overload
    def __getitem__(self, key: Color | tuple[Color]) -> ReqColorView: ...
    @overload
    def __getitem__(self, key: tuple[Color, FabricStyle]) -> ReqItemView: ...
    @overload
    def __getitem__(self, key: tuple[Color, FabricStyle, dt.datetime]) -> ReqPriorView: ...
    @overload
    def __getitem__(self, key: tuple[Color, FabricStyle, dt.datetime, str]) -> ReqView: ...
    def add(self, data: Req) -> None: ...
    def remove(self, dview: ReqView) -> None: ...
    def fullkeys(self) -> ReqGreigeKeys: ...
    def view(self) -> ReqGreigeView: ...

class DemandView(GroupedView[str, GreigeStyle]):
    """
    A class for views of Demand objects.
    """
    def __init__(self, link: 'ReqGreigeGroup') -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> 'DemandView': ...
    @overload
    def __getitem__(self, key: GreigeStyle | tuple[GreigeStyle]) -> ReqGreigeView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color]) -> ReqColorView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color, FabricStyle]) -> ReqItemView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color, FabricStyle, dt.datetime]) -> ReqPriorView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color, FabricStyle, dt.datetime, str]) -> ReqView: ...
    def add(self, data: Req) -> None: ...
    def remove(self, dview: ReqView) -> Req: ...
    def fullkeys(self) -> DemandKeys: ...

class Demand(Grouped[str, GreigeStyle]):
    """
    A subtype of Grouped for grouping Req objects.
    """
    def __init__(self) -> None: ...
    @overload
    def __getitem__(self, key: tuple[()]) -> DemandView: ...
    @overload
    def __getitem__(self, key: GreigeStyle | tuple[GreigeStyle]) -> ReqGreigeView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color]) -> ReqColorView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color, FabricStyle]) -> ReqItemView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color, FabricStyle, dt.datetime]) -> ReqPriorView: ...
    @overload
    def __getitem__(self, key: tuple[GreigeStyle, Color, FabricStyle, dt.datetime, str]) -> ReqView: ...
    def add(self, data: Req) -> None: ...
    def remove(self, dview: ReqView) -> None: ...
    def fullkeys(self) -> DemandKeys: ...
    def view(self) -> DemandView: ...