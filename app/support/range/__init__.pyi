from typing import TypeVar, Generic, Protocol, NamedTuple
from datetime import datetime

class _SupportsComp(Protocol):
    def __eq__(self, value: '_SupportsComp') -> bool: ...
    def __le__(self, value: '_SupportsComp') -> bool: ...
    def __lt__(self, value: '_SupportsComp') -> bool: ...
    def __ge__(self, value: '_SupportsComp') -> bool: ...
    def __gt__(self, value: '_SupportsComp') -> bool: ...

_T = TypeVar('_T', bound=_SupportsComp)

class ContRange(Generic[_T], NamedTuple):
    minval: _T
    maxval: _T
    def contains(self, value: _T) -> bool: ...
    def is_above(self, value: _T) -> bool: ...
    def is_below(self, value: _T) -> bool: ...
    
class FloatRange(ContRange[float]):
    def average(self) -> float: ...

DateRange = ContRange[datetime]